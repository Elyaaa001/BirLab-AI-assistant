import asyncio
import json
from typing import Dict, Any, Optional
import aiohttp
from .base_connector import AIModelConnector


class OpenAIConnector(AIModelConnector):
    """
    Connector for OpenAI's API (GPT models).
    """
    
    def __init__(self, model_name: str = "gpt-3.5-turbo", api_key: Optional[str] = None,
                 base_url: str = "https://api.openai.com/v1", **config):
        super().__init__(model_name, config)
        self.api_key = api_key or config.get("api_key")
        self.base_url = base_url
        self.organization = config.get("organization")
        
        if not self.api_key:
            raise ValueError("OpenAI API key is required")
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """
        Generate a response using OpenAI's chat completion API.
        
        Args:
            prompt: The input prompt
            **kwargs: Additional parameters (temperature, max_tokens, etc.)
            
        Returns:
            Generated response string
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if self.organization:
            headers["OpenAI-Organization"] = self.organization
        
        # Prepare the request payload
        messages = [{"role": "user", "content": prompt}]
        
        payload = {
            "model": self.model_name,
            "messages": messages,
            "temperature": kwargs.get("temperature", 0.7),
            "max_tokens": kwargs.get("max_tokens", 1000),
        }
        
        # Add optional parameters
        if "top_p" in kwargs:
            payload["top_p"] = kwargs["top_p"]
        if "frequency_penalty" in kwargs:
            payload["frequency_penalty"] = kwargs["frequency_penalty"]
        if "presence_penalty" in kwargs:
            payload["presence_penalty"] = kwargs["presence_penalty"]
        if "stop" in kwargs:
            payload["stop"] = kwargs["stop"]
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"OpenAI API error {response.status}: {error_text}")
                    
                    result = await response.json()
                    
                    if "choices" not in result or not result["choices"]:
                        raise Exception("No response generated by OpenAI")
                    
                    return result["choices"][0]["message"]["content"]
                    
            except aiohttp.ClientError as e:
                raise Exception(f"Network error communicating with OpenAI: {str(e)}")
            except json.JSONDecodeError as e:
                raise Exception(f"Failed to parse OpenAI response: {str(e)}")
    
    async def validate_connection(self) -> bool:
        """
        Validate the connection to OpenAI API by making a simple request.
        
        Returns:
            True if connection is valid, False otherwise
        """
        try:
            # Make a simple request to validate the connection
            response = await self.generate_response(
                "Hello", 
                max_tokens=5,
                temperature=0
            )
            return len(response.strip()) > 0
        except Exception as e:
            self.logger.error(f"Connection validation failed: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """
        Get information about the OpenAI model.
        
        Returns:
            Dictionary containing model information
        """
        model_info = {
            "provider": "OpenAI",
            "model_name": self.model_name,
            "type": "chat_completion",
            "base_url": self.base_url
        }
        
        # Add known model specifications
        if "gpt-4" in self.model_name.lower():
            model_info.update({
                "context_length": 8192 if "32k" not in self.model_name else 32768,
                "training_data": "Up to September 2021",
                "capabilities": ["text_generation", "reasoning", "code_generation", "analysis"]
            })
        elif "gpt-3.5" in self.model_name.lower():
            model_info.update({
                "context_length": 4096 if "16k" not in self.model_name else 16384,
                "training_data": "Up to September 2021", 
                "capabilities": ["text_generation", "conversation", "code_generation"]
            })
        
        return model_info
    
    async def get_available_models(self) -> Dict[str, Any]:
        """
        Get list of available models from OpenAI API.
        
        Returns:
            Dictionary containing available models
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if self.organization:
            headers["OpenAI-Organization"] = self.organization
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.base_url}/models",
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status != 200:
                        return {"error": f"API error {response.status}"}
                    
                    result = await response.json()
                    
                    # Filter for chat models
                    chat_models = []
                    for model in result.get("data", []):
                        if "gpt" in model.get("id", "").lower():
                            chat_models.append({
                                "id": model.get("id"),
                                "created": model.get("created"),
                                "owned_by": model.get("owned_by")
                            })
                    
                    return {
                        "available_models": chat_models,
                        "total_count": len(chat_models)
                    }
                    
        except Exception as e:
            self.logger.error(f"Failed to get available models: {e}")
            return {"error": str(e)}


# Convenience function to create OpenAI agents
def create_openai_agent(model_name: str = "gpt-3.5-turbo", 
                       api_key: Optional[str] = None,
                       capabilities: Optional[list] = None,
                       system_prompt: str = "",
                       **config) -> 'AIAgent':
    """
    Create an AI agent using OpenAI connector.
    
    Args:
        model_name: OpenAI model to use
        api_key: OpenAI API key
        capabilities: List of capabilities for the agent
        system_prompt: System prompt for the agent
        **config: Additional configuration
        
    Returns:
        Configured AIAgent instance
    """
    from .base_connector import AIAgent
    
    # Default capabilities for OpenAI models
    if capabilities is None:
        capabilities = [
            "text_generation", 
            "conversation", 
            "analysis", 
            "reasoning",
            "code_generation",
            "creative_writing"
        ]
    
    connector = OpenAIConnector(model_name, api_key, **config)
    agent = AIAgent(connector, capabilities, name=f"OpenAI_{model_name}")
    
    if system_prompt:
        agent.set_system_prompt(system_prompt)
    
    return agent 