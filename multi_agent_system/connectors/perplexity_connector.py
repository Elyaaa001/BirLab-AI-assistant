import asyncio
import json
from typing import Dict, Any, Optional
import aiohttp
from .base_connector import AIModelConnector


class PerplexityConnector(AIModelConnector):
    """
    Connector for Perplexity AI models (search-enhanced AI responses).
    """
    
    def __init__(self, model_name: str = "llama-3.1-sonar-small-128k-online", api_key: Optional[str] = None,
                 base_url: str = "https://api.perplexity.ai", **config):
        super().__init__(model_name, config)
        self.api_key = api_key or config.get("api_key")
        self.base_url = base_url.rstrip('/')
        
        if not self.api_key:
            raise ValueError("Perplexity API key is required")
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """
        Generate a response using Perplexity's search-enhanced API.
        
        Args:
            prompt: The input prompt
            **kwargs: Additional parameters
            
        Returns:
            Generated response string with real-time search data
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # Prepare messages
        messages = [{"role": "user", "content": prompt}]
        
        # Add system message if provided
        if "system_prompt" in kwargs:
            messages.insert(0, {"role": "system", "content": kwargs["system_prompt"]})
        
        payload = {
            "model": self.model_name,
            "messages": messages,
            "temperature": kwargs.get("temperature", 0.2),  # Lower temp for more factual responses
            "max_tokens": kwargs.get("max_tokens", 1000),
            "top_p": kwargs.get("top_p", 0.9),
            "search_domain_filter": kwargs.get("search_domains", []),  # Limit search to specific domains
            "return_citations": kwargs.get("return_citations", True),
            "search_recency_filter": kwargs.get("search_recency", "month"),  # month, week, day
            "top_k": kwargs.get("top_k", 0),
            "stream": False,
            "presence_penalty": kwargs.get("presence_penalty", 0),
            "frequency_penalty": kwargs.get("frequency_penalty", 1)
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"Perplexity API error {response.status}: {error_text}")
                    
                    result = await response.json()
                    
                    if "choices" not in result or not result["choices"]:
                        raise Exception("No response generated by Perplexity")
                    
                    # Extract the main response
                    content = result["choices"][0]["message"]["content"]
                    
                    # Add citations if available and requested
                    if kwargs.get("include_citations", False) and "citations" in result:
                        citations = result.get("citations", [])
                        if citations:
                            content += "\n\n**Sources:**\n"
                            for i, citation in enumerate(citations[:5], 1):  # Limit to 5 citations
                                content += f"{i}. {citation.get('title', 'Unknown')} - {citation.get('url', 'No URL')}\n"
                    
                    return content
                    
            except aiohttp.ClientError as e:
                raise Exception(f"Network error communicating with Perplexity: {str(e)}")
            except json.JSONDecodeError as e:
                raise Exception(f"Failed to parse Perplexity response: {str(e)}")
    
    async def validate_connection(self) -> bool:
        """Validate connection to Perplexity API"""
        try:
            response = await self.generate_response(
                "What is today's date?",
                max_tokens=10,
                temperature=0
            )
            return len(response.strip()) > 0
        except Exception as e:
            self.logger.error(f"Connection validation failed: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """Get information about the Perplexity model"""
        model_info = {
            "provider": "Perplexity AI",
            "model_name": self.model_name,
            "base_url": self.base_url
        }
        
        # Add model-specific information based on model name
        if "sonar" in self.model_name.lower():
            model_info.update({
                "capabilities": [
                    "search_enhanced_responses",
                    "real_time_information",
                    "factual_accuracy",
                    "citation_generation",
                    "current_events",
                    "research_assistance"
                ],
                "special_features": [
                    "Real-time web search integration",
                    "Automatic citation generation",
                    "Domain-specific search filtering",
                    "Recency-based search results",
                    "High factual accuracy"
                ]
            })
            
            if "small" in self.model_name.lower():
                model_info.update({
                    "context_length": 127072,
                    "size": "Small (faster responses)",
                    "best_for": ["Quick facts", "Simple queries", "Fast responses"]
                })
            elif "large" in self.model_name.lower():
                model_info.update({
                    "context_length": 127072,
                    "size": "Large (more comprehensive)",
                    "best_for": ["Complex research", "Detailed analysis", "In-depth responses"]
                })
                
            if "online" in self.model_name.lower():
                model_info["search_capability"] = "Real-time web search enabled"
            else:
                model_info["search_capability"] = "Static knowledge only"
        
        return model_info
    
    async def search_enhanced_query(self, query: str, domains: list = None, 
                                   recency: str = "month", **kwargs) -> str:
        """
        Perform a search-enhanced query with specific parameters.
        
        Args:
            query: The search query
            domains: List of domains to search (e.g., ["wikipedia.org", "arxiv.org"])
            recency: Search recency filter ("hour", "day", "week", "month", "year")
            **kwargs: Additional parameters
            
        Returns:
            Search-enhanced response with citations
        """
        return await self.generate_response(
            query,
            search_domains=domains or [],
            search_recency=recency,
            include_citations=True,
            temperature=0.1,  # Very factual
            **kwargs
        )


# Convenience functions
def create_perplexity_agent(model_name: str = "llama-3.1-sonar-small-128k-online",
                           api_key: Optional[str] = None,
                           capabilities: Optional[list] = None,
                           system_prompt: str = "",
                           **config) -> 'AIAgent':
    """Create an AI agent using Perplexity connector"""
    from .base_connector import AIAgent
    
    if capabilities is None:
        capabilities = [
            "search_enhanced_responses",
            "real_time_information", 
            "factual_research",
            "current_events",
            "citation_generation",
            "fact_checking",
            "research_assistance"
        ]
    
    connector = PerplexityConnector(model_name, api_key, **config)
    agent = AIAgent(connector, capabilities, name=f"Perplexity_{model_name.split('-')[0]}")
    
    if not system_prompt:
        system_prompt = """You are a research-focused AI assistant powered by real-time web search. 
        Provide accurate, up-to-date information with proper citations. Always prioritize factual accuracy 
        and include sources when making claims about current events or recent developments."""
    
    agent.set_system_prompt(system_prompt)
    return agent


def create_perplexity_research_agent(api_key: Optional[str] = None, **config):
    """Create a specialized research agent using Perplexity's large model"""
    return create_perplexity_agent(
        model_name="llama-3.1-sonar-large-128k-online",
        api_key=api_key,
        capabilities=[
            "academic_research",
            "in_depth_analysis", 
            "comprehensive_reports",
            "fact_verification",
            "current_events_analysis"
        ],
        system_prompt="""You are an expert research assistant with access to real-time information. 
        Provide comprehensive, well-cited responses with deep analysis. Always include relevant sources 
        and cross-reference information for accuracy.""",
        **config
    )


def create_perplexity_news_agent(api_key: Optional[str] = None, **config):
    """Create a news-focused agent using Perplexity"""
    return create_perplexity_agent(
        model_name="llama-3.1-sonar-small-128k-online",
        api_key=api_key,
        capabilities=[
            "breaking_news",
            "current_events",
            "news_analysis",
            "real_time_updates",
            "trend_monitoring"
        ],
        system_prompt="""You are a news analyst with access to real-time information. 
        Focus on providing accurate, up-to-date news and current events with proper sourcing. 
        Prioritize recent developments and breaking news.""",
        **config
    ) 