import asyncio
import json
from typing import Dict, Any, Optional
import aiohttp
from .base_connector import AIModelConnector


class AnthropicConnector(AIModelConnector):
    """
    Connector for Anthropic's Claude API.
    """
    
    def __init__(self, model_name: str = "claude-3-haiku-20240307", api_key: Optional[str] = None,
                 base_url: str = "https://api.anthropic.com/v1", **config):
        super().__init__(model_name, config)
        self.api_key = api_key or config.get("api_key")
        self.base_url = base_url
        self.anthropic_version = config.get("anthropic_version", "2023-06-01")
        
        if not self.api_key:
            raise ValueError("Anthropic API key is required")
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """
        Generate a response using Anthropic's messages API.
        
        Args:
            prompt: The input prompt
            **kwargs: Additional parameters (temperature, max_tokens, etc.)
            
        Returns:
            Generated response string
        """
        headers = {
            "x-api-key": self.api_key,
            "Content-Type": "application/json",
            "anthropic-version": self.anthropic_version
        }
        
        # Prepare the request payload
        messages = [{"role": "user", "content": prompt}]
        
        payload = {
            "model": self.model_name,
            "messages": messages,
            "max_tokens": kwargs.get("max_tokens", 1000),
        }
        
        # Add optional parameters
        if "temperature" in kwargs:
            payload["temperature"] = kwargs["temperature"]
        if "top_p" in kwargs:
            payload["top_p"] = kwargs["top_p"]
        if "top_k" in kwargs:
            payload["top_k"] = kwargs["top_k"]
        if "stop_sequences" in kwargs:
            payload["stop_sequences"] = kwargs["stop_sequences"]
        if "system" in kwargs:
            payload["system"] = kwargs["system"]
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{self.base_url}/messages",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"Anthropic API error {response.status}: {error_text}")
                    
                    result = await response.json()
                    
                    if "content" not in result or not result["content"]:
                        raise Exception("No response generated by Claude")
                    
                    # Extract text from the response content
                    content = result["content"]
                    if isinstance(content, list) and len(content) > 0:
                        return content[0].get("text", "")
                    else:
                        return str(content)
                    
            except aiohttp.ClientError as e:
                raise Exception(f"Network error communicating with Anthropic: {str(e)}")
            except json.JSONDecodeError as e:
                raise Exception(f"Failed to parse Anthropic response: {str(e)}")
    
    async def validate_connection(self) -> bool:
        """
        Validate the connection to Anthropic API by making a simple request.
        
        Returns:
            True if connection is valid, False otherwise
        """
        try:
            # Make a simple request to validate the connection
            response = await self.generate_response(
                "Hello", 
                max_tokens=5,
                temperature=0
            )
            return len(response.strip()) > 0
        except Exception as e:
            self.logger.error(f"Connection validation failed: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """
        Get information about the Claude model.
        
        Returns:
            Dictionary containing model information
        """
        model_info = {
            "provider": "Anthropic",
            "model_name": self.model_name,
            "type": "messages",
            "base_url": self.base_url,
            "api_version": self.anthropic_version
        }
        
        # Add known model specifications
        if "claude-3-opus" in self.model_name.lower():
            model_info.update({
                "context_length": 200000,
                "training_data": "Up to early 2024",
                "capabilities": ["text_generation", "reasoning", "analysis", "code_generation", "creative_writing", "research"]
            })
        elif "claude-3-sonnet" in self.model_name.lower():
            model_info.update({
                "context_length": 200000,
                "training_data": "Up to early 2024",
                "capabilities": ["text_generation", "reasoning", "analysis", "code_generation", "conversation"]
            })
        elif "claude-3-haiku" in self.model_name.lower():
            model_info.update({
                "context_length": 200000,
                "training_data": "Up to early 2024",
                "capabilities": ["text_generation", "conversation", "analysis", "fast_responses"]
            })
        elif "claude-2" in self.model_name.lower():
            model_info.update({
                "context_length": 100000,
                "training_data": "Up to early 2023",
                "capabilities": ["text_generation", "reasoning", "analysis", "code_generation"]
            })
        
        return model_info
    
    async def stream_response(self, prompt: str, **kwargs):
        """
        Generate a streaming response from Claude.
        
        Args:
            prompt: The input prompt
            **kwargs: Additional parameters
            
        Yields:
            Response chunks as they arrive
        """
        headers = {
            "x-api-key": self.api_key,
            "Content-Type": "application/json",
            "anthropic-version": self.anthropic_version
        }
        
        messages = [{"role": "user", "content": prompt}]
        
        payload = {
            "model": self.model_name,
            "messages": messages,
            "max_tokens": kwargs.get("max_tokens", 1000),
            "stream": True
        }
        
        # Add optional parameters
        if "temperature" in kwargs:
            payload["temperature"] = kwargs["temperature"]
        if "system" in kwargs:
            payload["system"] = kwargs["system"]
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{self.base_url}/messages",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=120)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"Anthropic API error {response.status}: {error_text}")
                    
                    async for line in response.content:
                        line = line.decode('utf-8').strip()
                        if line.startswith('data: '):
                            try:
                                data = json.loads(line[6:])  # Remove 'data: ' prefix
                                if data.get("type") == "content_block_delta":
                                    delta = data.get("delta", {})
                                    if "text" in delta:
                                        yield delta["text"]
                            except json.JSONDecodeError:
                                continue
                    
            except aiohttp.ClientError as e:
                raise Exception(f"Network error during streaming: {str(e)}")


# Convenience function to create Anthropic agents
def create_anthropic_agent(model_name: str = "claude-3-haiku-20240307", 
                          api_key: Optional[str] = None,
                          capabilities: Optional[list] = None,
                          system_prompt: str = "",
                          **config) -> 'AIAgent':
    """
    Create an AI agent using Anthropic connector.
    
    Args:
        model_name: Claude model to use
        api_key: Anthropic API key
        capabilities: List of capabilities for the agent
        system_prompt: System prompt for the agent
        **config: Additional configuration
        
    Returns:
        Configured AIAgent instance
    """
    from .base_connector import AIAgent
    
    # Default capabilities for Claude models
    if capabilities is None:
        if "opus" in model_name.lower():
            capabilities = [
                "text_generation", 
                "reasoning", 
                "analysis", 
                "research",
                "code_generation",
                "creative_writing",
                "complex_problem_solving"
            ]
        elif "sonnet" in model_name.lower():
            capabilities = [
                "text_generation", 
                "reasoning", 
                "analysis", 
                "code_generation",
                "conversation",
                "document_analysis"
            ]
        else:  # haiku or other
            capabilities = [
                "text_generation", 
                "conversation", 
                "analysis",
                "fast_responses",
                "simple_tasks"
            ]
    
    connector = AnthropicConnector(model_name, api_key, **config)
    agent = AIAgent(connector, capabilities, name=f"Claude_{model_name}")
    
    if system_prompt:
        agent.set_system_prompt(system_prompt)
    
    return agent 