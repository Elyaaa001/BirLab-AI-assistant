import asyncio
import json
from typing import Dict, Any, Optional
import aiohttp
from .base_connector import AIModelConnector


class CohereConnector(AIModelConnector):
    """
    Connector for Cohere AI models (Command, Generate, etc.)
    """
    
    def __init__(self, model_name: str = "command", api_key: Optional[str] = None,
                 base_url: str = "https://api.cohere.ai/v1", **config):
        super().__init__(model_name, config)
        self.api_key = api_key or config.get("api_key")
        self.base_url = base_url.rstrip('/')
        
        if not self.api_key:
            raise ValueError("Cohere API key is required")
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """
        Generate a response using Cohere's Generate API.
        
        Args:
            prompt: The input prompt
            **kwargs: Additional parameters
            
        Returns:
            Generated response string
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }
        
        payload = {
            "model": self.model_name,
            "prompt": prompt,
            "max_tokens": kwargs.get("max_tokens", 1000),
            "temperature": kwargs.get("temperature", 0.7),
            "k": kwargs.get("top_k", 0),
            "p": kwargs.get("top_p", 0.95),
            "frequency_penalty": kwargs.get("frequency_penalty", 0.0),
            "presence_penalty": kwargs.get("presence_penalty", 0.0),
            "return_likelihoods": "NONE"
        }
        
        # Add stop sequences if provided
        if "stop_sequences" in kwargs:
            payload["stop_sequences"] = kwargs["stop_sequences"]
        elif "stop" in kwargs:
            payload["stop_sequences"] = kwargs["stop"] if isinstance(kwargs["stop"], list) else [kwargs["stop"]]
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{self.base_url}/generate",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"Cohere API error {response.status}: {error_text}")
                    
                    result = await response.json()
                    
                    if "generations" not in result or not result["generations"]:
                        raise Exception("No response generated by Cohere")
                    
                    return result["generations"][0]["text"].strip()
                    
            except aiohttp.ClientError as e:
                raise Exception(f"Network error communicating with Cohere: {str(e)}")
            except json.JSONDecodeError as e:
                raise Exception(f"Failed to parse Cohere response: {str(e)}")
    
    async def chat_response(self, message: str, chat_history: list = None, **kwargs) -> str:
        """
        Generate a chat response using Cohere's Chat API.
        
        Args:
            message: The user message
            chat_history: Previous conversation history
            **kwargs: Additional parameters
            
        Returns:
            Generated response string
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }
        
        payload = {
            "model": self.model_name,
            "message": message,
            "temperature": kwargs.get("temperature", 0.7),
            "max_tokens": kwargs.get("max_tokens", 1000),
            "k": kwargs.get("top_k", 0),
            "p": kwargs.get("top_p", 0.95),
        }
        
        if chat_history:
            payload["chat_history"] = chat_history
        
        if "preamble" in kwargs:
            payload["preamble"] = kwargs["preamble"]
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{self.base_url}/chat",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"Cohere Chat API error {response.status}: {error_text}")
                    
                    result = await response.json()
                    
                    if "text" not in result:
                        raise Exception("No response generated by Cohere Chat")
                    
                    return result["text"].strip()
                    
            except aiohttp.ClientError as e:
                raise Exception(f"Network error communicating with Cohere Chat: {str(e)}")
            except json.JSONDecodeError as e:
                raise Exception(f"Failed to parse Cohere Chat response: {str(e)}")
    
    async def validate_connection(self) -> bool:
        """Validate connection to Cohere API"""
        try:
            response = await self.generate_response(
                "Hello",
                max_tokens=5,
                temperature=0
            )
            return len(response.strip()) > 0
        except Exception as e:
            self.logger.error(f"Connection validation failed: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """Get information about the Cohere model"""
        model_info = {
            "provider": "Cohere",
            "model_name": self.model_name,
            "base_url": self.base_url
        }
        
        if "command" in self.model_name.lower():
            model_info.update({
                "context_length": 4096,
                "capabilities": ["text_generation", "conversation", "reasoning", "analysis"],
                "type": "command"
            })
        elif "generate" in self.model_name.lower():
            model_info.update({
                "context_length": 2048,
                "capabilities": ["text_generation", "completion"],
                "type": "generate"
            })
        
        return model_info
    
    async def get_available_models(self) -> Dict[str, Any]:
        """Get list of available models from Cohere"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.base_url}/models",
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status != 200:
                        return {"error": f"API error {response.status}"}
                    
                    result = await response.json()
                    
                    models = []
                    for model in result.get("models", []):
                        models.append({
                            "name": model.get("name"),
                            "endpoints": model.get("endpoints", []),
                            "finetuned": model.get("finetuned", False)
                        })
                    
                    return {
                        "available_models": models,
                        "total_count": len(models)
                    }
                    
        except Exception as e:
            self.logger.error(f"Failed to get available models: {e}")
            return {"error": str(e)}


# Convenience function
def create_cohere_agent(model_name: str = "command",
                       api_key: Optional[str] = None,
                       capabilities: Optional[list] = None,
                       system_prompt: str = "",
                       **config) -> 'AIAgent':
    """Create an AI agent using Cohere connector"""
    from .base_connector import AIAgent
    
    if capabilities is None:
        if "command" in model_name.lower():
            capabilities = [
                "text_generation",
                "conversation",
                "reasoning",
                "analysis",
                "summarization"
            ]
        else:
            capabilities = [
                "text_generation",
                "completion",
                "creative_writing"
            ]
    
    connector = CohereConnector(model_name, api_key, **config)
    agent = AIAgent(connector, capabilities, name=f"Cohere_{model_name}")
    
    if system_prompt:
        agent.set_system_prompt(system_prompt)
    
    return agent 