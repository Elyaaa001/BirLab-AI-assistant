import asyncio
import json
from typing import Dict, Any, Optional
import aiohttp
from .base_connector import AIModelConnector


class GrokConnector(AIModelConnector):
    """
    Connector for Grok AI models from xAI (Elon Musk's AI company).
    """
    
    def __init__(self, model_name: str = "grok-beta", api_key: Optional[str] = None,
                 base_url: str = "https://api.x.ai/v1", **config):
        super().__init__(model_name, config)
        self.api_key = api_key or config.get("api_key")
        self.base_url = base_url.rstrip('/')
        
        if not self.api_key:
            raise ValueError("Grok API key is required")
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """
        Generate a response using Grok's API.
        
        Args:
            prompt: The input prompt
            **kwargs: Additional parameters
            
        Returns:
            Generated response string
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # Prepare messages for chat format
        messages = [{"role": "user", "content": prompt}]
        
        # Add system message if provided
        if "system_prompt" in kwargs or hasattr(self, 'system_prompt'):
            system_content = kwargs.get("system_prompt", getattr(self, 'system_prompt', ''))
            if system_content:
                messages.insert(0, {"role": "system", "content": system_content})
        
        payload = {
            "model": self.model_name,
            "messages": messages,
            "temperature": kwargs.get("temperature", 0.7),
            "max_tokens": kwargs.get("max_tokens", 1000),
            "top_p": kwargs.get("top_p", 0.9),
            "stream": False
        }
        
        # Add stop sequences if provided
        if "stop" in kwargs:
            payload["stop"] = kwargs["stop"] if isinstance(kwargs["stop"], list) else [kwargs["stop"]]
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status != 200:
                        error_text = await response.text()
                        raise Exception(f"Grok API error {response.status}: {error_text}")
                    
                    result = await response.json()
                    
                    if "choices" not in result or not result["choices"]:
                        raise Exception("No response generated by Grok")
                    
                    return result["choices"][0]["message"]["content"]
                    
            except aiohttp.ClientError as e:
                raise Exception(f"Network error communicating with Grok: {str(e)}")
            except json.JSONDecodeError as e:
                raise Exception(f"Failed to parse Grok response: {str(e)}")
    
    async def validate_connection(self) -> bool:
        """Validate connection to Grok API"""
        try:
            response = await self.generate_response(
                "Hello",
                max_tokens=5,
                temperature=0
            )
            return len(response.strip()) > 0
        except Exception as e:
            self.logger.error(f"Connection validation failed: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """Get information about the Grok model"""
        model_info = {
            "provider": "xAI (Grok)",
            "model_name": self.model_name,
            "base_url": self.base_url,
            "company": "xAI"
        }
        
        # Add model-specific information
        if "grok" in self.model_name.lower():
            model_info.update({
                "capabilities": [
                    "text_generation", 
                    "reasoning", 
                    "humor", 
                    "rebellious_responses",
                    "real_time_info",
                    "witty_commentary"
                ],
                "special_features": [
                    "Real-time X/Twitter data access",
                    "Rebellious and witty personality", 
                    "Less censored responses",
                    "Based on Hitchhiker's Guide philosophy"
                ],
                "context_length": 25000,
                "training_data": "Up to real-time via X/Twitter"
            })
        
        return model_info


# Convenience function
def create_grok_agent(model_name: str = "grok-beta",
                     api_key: Optional[str] = None,
                     capabilities: Optional[list] = None,
                     system_prompt: str = "",
                     **config) -> 'AIAgent':
    """Create an AI agent using Grok connector"""
    from .base_connector import AIAgent
    
    if capabilities is None:
        capabilities = [
            "text_generation",
            "reasoning",
            "humor",
            "real_time_info",
            "witty_responses",
            "rebellious_thinking",
            "creative_writing"
        ]
    
    connector = GrokConnector(model_name, api_key, **config)
    agent = AIAgent(connector, capabilities, name=f"Grok_{model_name}")
    
    # Default Grok personality if no system prompt provided
    if not system_prompt:
        system_prompt = """You are Grok, a rebellious AI with a sense of humor inspired by The Hitchhiker's Guide to the Galaxy. 
        You provide helpful answers but with wit, sarcasm, and a slightly rebellious attitude. You have access to real-time information 
        and aren't afraid to give unconventional perspectives."""
    
    agent.set_system_prompt(system_prompt)
    return agent 