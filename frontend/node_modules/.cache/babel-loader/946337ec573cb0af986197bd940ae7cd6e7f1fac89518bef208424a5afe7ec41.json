{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Provider/model icons\nconst PROVIDER_ICONS={openai:'🤖',google:'🧠',anthropic:'🎨',cohere:'📝',huggingface:'🤗',mistral:'🏰',together:'🤝',perplexity:'🔎',fireworks:'🎆',replicate:'🔁',groq:'⚡',ai21:'🧬',grok:'🦾',ollama:'🦙'};const getProviderIcon=provider=>PROVIDER_ICONS[provider]||'🤖';const SplitView=()=>{const[message,setMessage]=useState('');const[availableModels,setAvailableModels]=useState([]);const[selectedModels,setSelectedModels]=useState([]);const[results,setResults]=useState([]);const[isLoading,setIsLoading]=useState(false);const[comparisonStats,setComparisonStats]=useState(null);const[maxModels,setMaxModels]=useState(4);// Load available models on component mount\nuseEffect(()=>{loadAvailableModels();},[]);const loadAvailableModels=async()=>{try{const response=await axios.get(`${API_BASE_URL}/models/available`);setAvailableModels(response.data.all_models);// Auto-select first 2 models from different providers if possible\nconst models=response.data.all_models;if(models.length>=2){const providers=new Set();const autoSelected=[];for(const model of models){if(autoSelected.length<2&&!providers.has(model.provider)){autoSelected.push(model.id);providers.add(model.provider);}}setSelectedModels(autoSelected);}}catch(error){console.error('Error loading models:',error);}};const handleModelToggle=modelId=>{setSelectedModels(prev=>{if(prev.includes(modelId)){return prev.filter(id=>id!==modelId);}else if(prev.length<maxModels){return[...prev,modelId];}else{// Replace first model if at max capacity\nreturn[modelId,...prev.slice(1)];}});};const runComparison=async()=>{if(!message.trim()||selectedModels.length<1){alert('Please enter a message and select at least 1 model');return;}setIsLoading(true);setResults([]);setComparisonStats(null);try{const response=await axios.post(`${API_BASE_URL}/split-view`,{message:message.trim(),model_ids:selectedModels,max_models:maxModels});setResults(response.data.results);setComparisonStats(response.data.comparison_stats);}catch(error){var _error$response,_error$response$data;console.error('Split view error:',error);alert('Error running comparison: '+(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||error.message));}finally{setIsLoading(false);}};const getModelDisplayName=agentId=>{const model=availableModels.find(m=>m.id===agentId);return model?model.name:agentId;};const getModelProvider=agentId=>{const model=availableModels.find(m=>m.id===agentId);return model?model.provider:'unknown';};const formatResponseTime=time=>{return`${time}s`;};// Helper to highlight bests\nconst getHighlightClass=result=>{if(!comparisonStats)return'';if(comparisonStats.fastest_model===result.agent_id)return'highlight-fastest';if(comparisonStats.longest_response===result.agent_id)return'highlight-longest';if(comparisonStats.highest_quality===result.agent_id)return'highlight-quality';return'';};// Filter out only truly empty or errored models\nconst filteredModels=availableModels.filter(m=>m&&m.id&&m.name&&!m.error);return/*#__PURE__*/_jsxs(\"div\",{className:\"split-view\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"split-view-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDD00 Split View Comparison\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Compare responses from multiple AI models side-by-side\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-input-container\",children:/*#__PURE__*/_jsx(\"textarea\",{value:message,onChange:e=>setMessage(e.target.value),placeholder:\"Enter your prompt to compare across multiple models...\",className:\"message-input\",rows:3,disabled:isLoading})}),/*#__PURE__*/_jsxs(\"div\",{className:\"model-selection\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"selection-header\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Select Models (\",selectedModels.length,\"/\",maxModels,\")\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"max-models-control\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Max Models:\"}),/*#__PURE__*/_jsxs(\"select\",{value:maxModels,onChange:e=>setMaxModels(Number(e.target.value)),disabled:isLoading,children:[/*#__PURE__*/_jsx(\"option\",{value:2,children:\"2\"}),/*#__PURE__*/_jsx(\"option\",{value:3,children:\"3\"}),/*#__PURE__*/_jsx(\"option\",{value:4,children:\"4\"}),/*#__PURE__*/_jsx(\"option\",{value:6,children:\"6\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"models-grid\",children:filteredModels.map(model=>/*#__PURE__*/_jsxs(\"div\",{className:`model-card ${selectedModels.includes(model.id)?'selected':''}`,onClick:()=>handleModelToggle(model.id),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"model-info\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"provider-badge\",children:[getProviderIcon(model.provider||'unknown'),\" \",model.provider||'unknown']}),/*#__PURE__*/_jsx(\"span\",{className:\"model-name\",children:model.name})]}),/*#__PURE__*/_jsx(\"div\",{className:\"model-details\",children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Context: \",model.context_length]})})]},model.id))})]}),/*#__PURE__*/_jsx(\"button\",{onClick:runComparison,disabled:isLoading||!message.trim()||selectedModels.length===0,className:\"compare-button\",children:isLoading?'🔄 Comparing...':'🚀 Compare Models'})]}),comparisonStats&&/*#__PURE__*/_jsxs(\"div\",{className:\"comparison-stats\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCCA Comparison Results\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total Time:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[comparisonStats.total_comparison_time,\"s\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Successful:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[comparisonStats.successful_responses,\"/\",comparisonStats.total_models]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Average Time:\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"stat-value\",children:[comparisonStats.average_response_time,\"s\"]})]}),comparisonStats.fastest_model&&/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item highlight-fastest\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Fastest:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:getModelDisplayName(comparisonStats.fastest_model)})]}),comparisonStats.longest_response&&/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item highlight-longest\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Longest:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:getModelDisplayName(comparisonStats.longest_response)})]}),comparisonStats.highest_quality&&/*#__PURE__*/_jsxs(\"div\",{className:\"stat-item highlight-quality\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Best Quality:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:getModelDisplayName(comparisonStats.highest_quality)})]})]})]}),results.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"results-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDD25 Model Responses\"}),/*#__PURE__*/_jsx(\"div\",{className:\"results-grid\",children:results.map((result,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`result-card ${getHighlightClass(result)}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"result-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"model-info\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"provider-tag\",children:getModelProvider(result.agent_id)}),/*#__PURE__*/_jsx(\"span\",{className:\"model-name\",children:getModelDisplayName(result.agent_id)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"result-stats\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"response-time\",children:[\"\\u23F1\\uFE0F \",formatResponseTime(result.response_time)]}),/*#__PURE__*/_jsxs(\"span\",{className:\"response-length\",children:[\"\\uD83D\\uDCDD \",result.response_length_words,\" words / \",result.response_length_chars,\" chars\"]}),/*#__PURE__*/_jsxs(\"span\",{className:\"quality-score\",children:[\"\\u2B50 \",Math.round(result.quality_score*100),\"%\"]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"result-content\",children:result.error?/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[\"\\u274C Error: \",result.error]}):/*#__PURE__*/_jsx(\"div\",{className:\"response-text\",children:result.response})}),/*#__PURE__*/_jsx(\"div\",{className:\"result-footer\",children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Generated at \",new Date(result.timestamp).toLocaleTimeString()]})})]},result.agent_id))})]}),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"loading-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-spinner\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Querying \",selectedModels.length,\" models...\"]})]})})]});};export default SplitView;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","API_BASE_URL","process","env","REACT_APP_API_URL","PROVIDER_ICONS","openai","google","anthropic","cohere","huggingface","mistral","together","perplexity","fireworks","replicate","groq","ai21","grok","ollama","getProviderIcon","provider","SplitView","message","setMessage","availableModels","setAvailableModels","selectedModels","setSelectedModels","results","setResults","isLoading","setIsLoading","comparisonStats","setComparisonStats","maxModels","setMaxModels","loadAvailableModels","response","get","data","all_models","models","length","providers","Set","autoSelected","model","has","push","id","add","error","console","handleModelToggle","modelId","prev","includes","filter","slice","runComparison","trim","alert","post","model_ids","max_models","comparison_stats","_error$response","_error$response$data","detail","getModelDisplayName","agentId","find","m","name","getModelProvider","formatResponseTime","time","getHighlightClass","result","fastest_model","agent_id","longest_response","highest_quality","filteredModels","className","children","value","onChange","e","target","placeholder","rows","disabled","Number","map","onClick","context_length","total_comparison_time","successful_responses","total_models","average_response_time","index","response_time","response_length_words","response_length_chars","Math","round","quality_score","Date","timestamp","toLocaleTimeString"],"sources":["/Users/mac/Documents/BirLab-AI-assistant/frontend/src/SplitView.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Provider/model icons\nconst PROVIDER_ICONS = {\n  openai: '🤖',\n  google: '🧠',\n  anthropic: '🎨',\n  cohere: '📝',\n  huggingface: '🤗',\n  mistral: '🏰',\n  together: '🤝',\n  perplexity: '🔎',\n  fireworks: '🎆',\n  replicate: '🔁',\n  groq: '⚡',\n  ai21: '🧬',\n  grok: '🦾',\n  ollama: '🦙',\n};\n\nconst getProviderIcon = (provider) => PROVIDER_ICONS[provider] || '🤖';\n\nconst SplitView = () => {\n  const [message, setMessage] = useState('');\n  const [availableModels, setAvailableModels] = useState([]);\n  const [selectedModels, setSelectedModels] = useState([]);\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [comparisonStats, setComparisonStats] = useState(null);\n  const [maxModels, setMaxModels] = useState(4);\n\n  // Load available models on component mount\n  useEffect(() => {\n    loadAvailableModels();\n  }, []);\n\n  const loadAvailableModels = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/models/available`);\n      setAvailableModels(response.data.all_models);\n      \n      // Auto-select first 2 models from different providers if possible\n      const models = response.data.all_models;\n      if (models.length >= 2) {\n        const providers = new Set();\n        const autoSelected = [];\n        \n        for (const model of models) {\n          if (autoSelected.length < 2 && !providers.has(model.provider)) {\n            autoSelected.push(model.id);\n            providers.add(model.provider);\n          }\n        }\n        \n        setSelectedModels(autoSelected);\n      }\n    } catch (error) {\n      console.error('Error loading models:', error);\n    }\n  };\n\n  const handleModelToggle = (modelId) => {\n    setSelectedModels(prev => {\n      if (prev.includes(modelId)) {\n        return prev.filter(id => id !== modelId);\n      } else if (prev.length < maxModels) {\n        return [...prev, modelId];\n      } else {\n        // Replace first model if at max capacity\n        return [modelId, ...prev.slice(1)];\n      }\n    });\n  };\n\n  const runComparison = async () => {\n    if (!message.trim() || selectedModels.length < 1) {\n      alert('Please enter a message and select at least 1 model');\n      return;\n    }\n\n    setIsLoading(true);\n    setResults([]);\n    setComparisonStats(null);\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/split-view`, {\n        message: message.trim(),\n        model_ids: selectedModels,\n        max_models: maxModels\n      });\n\n      setResults(response.data.results);\n      setComparisonStats(response.data.comparison_stats);\n    } catch (error) {\n      console.error('Split view error:', error);\n      alert('Error running comparison: ' + (error.response?.data?.detail || error.message));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getModelDisplayName = (agentId) => {\n    const model = availableModels.find(m => m.id === agentId);\n    return model ? model.name : agentId;\n  };\n\n  const getModelProvider = (agentId) => {\n    const model = availableModels.find(m => m.id === agentId);\n    return model ? model.provider : 'unknown';\n  };\n\n  const formatResponseTime = (time) => {\n    return `${time}s`;\n  };\n\n  // Helper to highlight bests\n  const getHighlightClass = (result) => {\n    if (!comparisonStats) return '';\n    if (comparisonStats.fastest_model === result.agent_id) return 'highlight-fastest';\n    if (comparisonStats.longest_response === result.agent_id) return 'highlight-longest';\n    if (comparisonStats.highest_quality === result.agent_id) return 'highlight-quality';\n    return '';\n  };\n\n  // Filter out only truly empty or errored models\n  const filteredModels = availableModels.filter(\n    m => m && m.id && m.name && (!m.error)\n  );\n\n  return (\n    <div className=\"split-view\">\n      <div className=\"split-view-header\">\n        <h2>🔀 Split View Comparison</h2>\n        <p>Compare responses from multiple AI models side-by-side</p>\n      </div>\n\n      {/* Input Section */}\n      <div className=\"input-section\">\n        <div className=\"message-input-container\">\n          <textarea\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            placeholder=\"Enter your prompt to compare across multiple models...\"\n            className=\"message-input\"\n            rows={3}\n            disabled={isLoading}\n          />\n        </div>\n\n        {/* Model Selection */}\n        <div className=\"model-selection\">\n          <div className=\"selection-header\">\n            <h3>Select Models ({selectedModels.length}/{maxModels})</h3>\n            <div className=\"max-models-control\">\n              <label>Max Models:</label>\n              <select \n                value={maxModels} \n                onChange={(e) => setMaxModels(Number(e.target.value))}\n                disabled={isLoading}\n              >\n                <option value={2}>2</option>\n                <option value={3}>3</option>\n                <option value={4}>4</option>\n                <option value={6}>6</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"models-grid\">\n            {filteredModels.map(model => (\n              <div \n                key={model.id}\n                className={`model-card ${selectedModels.includes(model.id) ? 'selected' : ''}`}\n                onClick={() => handleModelToggle(model.id)}\n              >\n                <div className=\"model-info\">\n                  <span className=\"provider-badge\">{getProviderIcon(model.provider || 'unknown')} {model.provider || 'unknown'}</span>\n                  <span className=\"model-name\">{model.name}</span>\n                </div>\n                <div className=\"model-details\">\n                  <small>Context: {model.context_length}</small>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <button \n          onClick={runComparison}\n          disabled={isLoading || !message.trim() || selectedModels.length === 0}\n          className=\"compare-button\"\n        >\n          {isLoading ? '🔄 Comparing...' : '🚀 Compare Models'}\n        </button>\n      </div>\n\n      {/* Comparison Stats */}\n      {comparisonStats && (\n        <div className=\"comparison-stats\">\n          <h3>📊 Comparison Results</h3>\n          <div className=\"stats-grid\">\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Total Time:</span>\n              <span className=\"stat-value\">{comparisonStats.total_comparison_time}s</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Successful:</span>\n              <span className=\"stat-value\">{comparisonStats.successful_responses}/{comparisonStats.total_models}</span>\n            </div>\n            <div className=\"stat-item\">\n              <span className=\"stat-label\">Average Time:</span>\n              <span className=\"stat-value\">{comparisonStats.average_response_time}s</span>\n            </div>\n            {comparisonStats.fastest_model && (\n              <div className=\"stat-item highlight-fastest\">\n                <span className=\"stat-label\">Fastest:</span>\n                <span className=\"stat-value\">{getModelDisplayName(comparisonStats.fastest_model)}</span>\n              </div>\n            )}\n            {comparisonStats.longest_response && (\n              <div className=\"stat-item highlight-longest\">\n                <span className=\"stat-label\">Longest:</span>\n                <span className=\"stat-value\">{getModelDisplayName(comparisonStats.longest_response)}</span>\n              </div>\n            )}\n            {comparisonStats.highest_quality && (\n              <div className=\"stat-item highlight-quality\">\n                <span className=\"stat-label\">Best Quality:</span>\n                <span className=\"stat-value\">{getModelDisplayName(comparisonStats.highest_quality)}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Results Grid */}\n      {results.length > 0 && (\n        <div className=\"results-section\">\n          <h3>🔥 Model Responses</h3>\n          <div className=\"results-grid\">\n            {results.map((result, index) => (\n              <div key={result.agent_id} className={`result-card ${getHighlightClass(result)}`}>\n                <div className=\"result-header\">\n                  <div className=\"model-info\">\n                    <span className=\"provider-tag\">{getModelProvider(result.agent_id)}</span>\n                    <span className=\"model-name\">{getModelDisplayName(result.agent_id)}</span>\n                  </div>\n                  <div className=\"result-stats\">\n                    <span className=\"response-time\">⏱️ {formatResponseTime(result.response_time)}</span>\n                    <span className=\"response-length\">📝 {result.response_length_words} words / {result.response_length_chars} chars</span>\n                    <span className=\"quality-score\">⭐ {Math.round(result.quality_score * 100)}%</span>\n                  </div>\n                </div>\n                <div className=\"result-content\">\n                  {result.error ? (\n                    <div className=\"error-message\">\n                      ❌ Error: {result.error}\n                    </div>\n                  ) : (\n                    <div className=\"response-text\">\n                      {result.response}\n                    </div>\n                  )}\n                </div>\n                <div className=\"result-footer\">\n                  <small>Generated at {new Date(result.timestamp).toLocaleTimeString()}</small>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">\n            <div className=\"spinner\"></div>\n            <p>Querying {selectedModels.length} models...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SplitView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}